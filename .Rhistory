find package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
x <- list(a=1:5, b= rnorm(1))
lapply (x, mean)
x <- list(a=1:5, b= rnorm(10))
lapply (x, mean)
x <- list(a=1:5, b=1:10)
lapply (x, mean)
x <- list(a=1:5, b= rnorm(10), c= rnorm(20,1), d=rnorm(100,5))
lapply (x, mean)
x <- 1:4
lapply (x, runif)
lapply (x, runif, min = 0, max = 10)
lapply (x, function (elt) elt[,1])
x <- list (a = matrix (1:4, 2, 2), b = matrix (1:6, 3,2))
lapply (x, function (elt) elt[,1])
lapply (x, function (elt) elt[1,])
b
x
x <- list(a=1:5, b= rnorm(10), c= rnorm(20,1), d=rnorm(100,5))
lapply (x, mean)
sapply (x, mean)
y <- sapply (x, mean)
mean (y)
y <- lapply (x, mean)
mean (y)
x <- matrix ( rnorm (200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, .5, .75))
apply(x, 2, quantile, probs = c(0.25, .5, .75))
x <- matrix ( rnorm (200), 20, 5)
apply(x, 2, quantile, probs = c(0.25, .5, .75))
cube <- function(x,n) { x^3 }
cube(3)
x <- 1:10
if(x>5) { x <- 0 }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
?cbind
sin
log
log3
log2
log10
log(5) == log2(5)
log(5) == loge(5)
log(5) == log10(5)
log(5,2)
log(8,2)
log(8,10)
a = array(1:12, 3, 4, dimnames = c(a:l))
a = array(1:12, c(3, 4), dimnames = c(a:l))
a = array(1:12, c(3, 4), dimnames = a:l)
a = array(1:12, c(3, 4))
a
a = array(1:12, 3, 4)
a
a = array(1:12, c(3, 4))
a
?dimnames
data(cars)
dim(cars)
names(cars)
hist(cars$speed)
hist(cars$speed, breaks=12)
summary(cars)
plot(cars)
library(lattice)
dotplot(Amount~Year}Food, data=consumption)
dotplot(Amount~Year|Food, data=consumption)
data(nutshell)
library(nutshell)
library.package(nutshell)
package(nutshell)
packageSlot(nutshell)
(nutshell)
vignette(cars)
vignette("cars")
vignette("nutshell")
vignette(ALL=TRUE)
vignette(all=TRUE)
(.packages())
(.packages(all.available = TRUE))
library()
library (datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
sapply(s, function(x), colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
s
source("pollutantmean.R")
source("D:\\Work\\Learn\\R\\Coursera\\Project\\02-R Programming\\Week 2\\Code\\pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
library(datasets)
pollutantmean("specdata", "sulfate", 1:10)
ls
ls()
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version ==
| "3.1.1", country == "US")
filter(cran, r_version == | "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, and size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
sumarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- table_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View)top_counts)
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique)
)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, col = sex_class, into = c("sex, "class""))
separate(res, col = sex_class, into = c("sex", "class"))
sumbit()
submit()
students3
submit()
submit()
submit()
?gather
submit()
?spread
submit()
submit()
skip()
extract_numeric(class)
extract_numeric(class5)
extract_numeric("class5"")
""
extract_numeric("class5")
?mutate
skip()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows (passed, failed)
sat
?contains
?select
submit()
submit()
submit()
getwd()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours=1, minutes=40)
this_moment <- update(this_moment, hours=1, minutes=40)
this_moment
getwd()
setwd("C:\\Users\\prbalakr\\Documents\\GitHub\\datasciencecoursera\\Assignments\\R Programming\\ProgrammingAssignment2")
getwd()
ls
ls()
rm (ls())
rm (s<-ls())
rm (c(s<-ls())
)
rm (c(s<-ls())
)
rm (c(s<-ls()))
dir()
install.packages(c("crayon", "Rcpp", "rversions"))
?setinverse
?inverse.rle
?setinverse
?`<<`
?'<<'
?`\<<`
source('cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m
m$get()
cachesolve(m)
cacheSolve(m)
cacheSolve(m)
